
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      // Super admins are hardcoded for bootstrap purposes
      let superAdmins = ["admin@jaytelclassic.com", "jaytelclassicstore@gmail.com", "temahfingerofgod@gmail.com"];
      if (request.auth.token.email in superAdmins) {
        return true;
      }
      
      let adminDoc = get(/databases/$(database)/documents/admins/$(request.auth.uid));
      if (exists(/databases/$(database)/documents/admins/$(request.auth.uid))) {
        let adminData = adminDoc.data;
        let expiry = adminData.get('expiresAt', null);
        let role = adminData.get('role', '');
        
        let hasValidRole = role == 'admin' || role == 'superadmin';
        let isNotExpired = expiry == null || expiry > request.time;

        return hasValidRole && isNotExpired;
      }

      return false;
    }

    // Site settings can be read by anyone, but only written by admins.
    match /site/{document} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Products can be read by anyone, but only written by admins.
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Orders can be created by authenticated users for themselves.
    // Orders can be read/updated by the owner or any admin.
    match /orders/{orderId} {
      allow read, update: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow delete: if isAdmin(); // Only admins can delete orders
    }

    // Admins collection can only be read by admins themselves to check status.
    // Only superadmins should be able to write/create/delete other admins,
    // but for simplicity and security, we manage this directly in the Firebase Console.
    match /admins/{adminId} {
        allow read: if isOwner(adminId) || isAdmin();
        allow write, create, delete: if false; // Prevent modification from client-side
    }
  }
}
