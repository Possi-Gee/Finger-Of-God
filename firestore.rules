rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    
    // Check if the user is authenticated
    function isAuth() {
      return request.auth != null;
    }
    
    // Check if the requesting user has an entry in the /admins collection
    function isAdmin() {
      return isAuth() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Check if the user is a superadmin. This is the most privileged role.
    function isSuperAdmin() {
      return isAdmin() && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'superadmin';
    }

    // Check if the user is the owner of a document
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    // --- Collection Rules ---

    // Products can be read by anyone, but only written by an admin.
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Site settings (theme, name, etc.) can be read by anyone, but only written by an admin.
    match /site/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Users can create their own orders.
    // Users can read/update their own orders. Admins can read/update any order.
    match /orders/{orderId} {
      allow read, update: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
    }
    
    // Only a superadmin can read the list of other admins.
    // Management (create/delete) is handled in the console, so write access is denied.
    match /admins/{userId} {
      allow list, read: if isSuperAdmin();
      allow write: if false; 
    }
  }
}
