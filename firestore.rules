
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      // Super admins have permanent access
      let superAdmins = ["admin@jaytelclassic.com", "jaytelclassicstore@gmail.com", "temahfingerofgod@gmail.com"];
      if (request.auth.token.email in superAdmins) {
        return true;
      }
      
      // Check for role-based access from the 'admins' collection
      if (exists(/databases/$(database)/documents/admins/$(request.auth.uid))) {
          let adminDoc = get(/databases/$(database)/documents/admins/$(request.auth.uid));
          let expiresAt = adminDoc.data.expiresAt;
          let role = adminDoc.data.role;
          
          // Allow if role is admin or superadmin and the token is not expired
          return (role == 'admin' || role == 'superadmin') && (expiresAt == null || request.time < expiresAt);
      }

      // If the document doesn't exist, they are not an admin.
      return false;
    }

    // Publicly readable collections
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /site/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // User-specific collections
    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow create: if request.auth.uid != null;
    }

    // Orders can be read by owners or admins.
    // Orders can only be created by authenticated users.
    // Orders can only be updated by admins.
    match /orders/{orderId} {
      allow read: if isOwner(request.resource.data.userId) || isAdmin();
      allow create: if request.auth.uid != null;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Admins collection can only be read by admins.
    // Creation/deletion should be handled manually in the console for security.
    match /admins/{adminId} {
        allow read: if isAdmin();
        allow write: if false; // Disallow client-side writes for security
    }

    // Allow logged-in users to read their own cart and wishlist
    match /users/{userId}/{document=**} {
      allow read, write: if isOwner(userId);
    }
  }
}
