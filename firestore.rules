rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---

    // Checks if the requesting user has a document in the /admins collection
    function hasAdminEntry() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Retrieves the admin data for the requesting user
    function getAdminData() {
      return get(/databases/$(database)/documents/admins/$(request.auth.uid)).data;
    }

    // Checks if the admin's access has not expired. No 'expiresAt' field means permanent access.
    function isNotExpired() {
      let adminData = getAdminData();
      return !('expiresAt' in adminData) || request.time < timestamp.parse(adminData.expiresAt);
    }
    
    // Checks if the user is a valid admin (has an entry and is not expired)
    function isAdmin() {
      return hasAdminEntry() && isNotExpired();
    }
    
    // Checks if the user is specifically a superadmin
    function isSuperAdmin() {
      return isAdmin() && getAdminData().role == 'superadmin';
    }

    // --- Collection Rules ---

    // Products: Public can read, Admins can write
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Site settings: Public can read, Admins can write
    match /site/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Orders: Users can manage their own, Admins can manage all
    match /orders/{orderId} {
      allow read, update: if request.auth.uid == resource.data.userId || isAdmin();
      allow create: if request.auth.uid == request.resource.data.userId;
    }
    
    // Admins Collection:
    // - Any authenticated user can read (to check their own status).
    // - Only SuperAdmins can create or delete admin records.
    match /admins/{userId} {
      allow read: if request.auth != null;
      allow create, delete: if isSuperAdmin();
    }
  }
}
