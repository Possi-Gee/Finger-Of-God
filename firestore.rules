rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is an admin.
    // It checks the /admins collection for a document matching the user's UID.
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Products are publicly readable, but only admins can write.
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Site settings are publicly readable, but only admins can write.
    match /site/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Users can create and manage their own orders. Admins can manage all orders.
    match /orders/{orderId} {
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if isAdmin() || request.auth.uid == resource.data.userId;
      allow delete: if isAdmin();
    }

    // Authenticated users can read the admins collection to check roles.
    // Only superadmins (defined in security rules or a separate field) can write.
    // For now, we will restrict writes completely from the client for safety.
    match /admins/{adminId} {
      allow read: if request.auth != null;
      // Writes to the admins collection should only be done via a secure Cloud Function.
      allow write: if false; 
    }

    // Default deny all other access.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
