
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      // Check a hardcoded list of super admin emails first.
      // This is useful for bootstrapping the first admin.
      let superAdmins = ["admin@jaytelclassic.com", "jaytelclassicstore@gmail.com", "temahfingerofgod@gmail.com"];
      if (request.auth.token.email in superAdmins) {
        return true;
      }
      
      // Check the 'admins' collection for the user's role.
      // Assumes the document ID in 'admins' is the user's UID.
      let adminDoc = get(/databases/$(database)/documents/admins/$(request.auth.uid));
      if (exists(/databases/$(database)/documents/admins/$(request.auth.uid))) {
          // Check if the role is 'admin' or 'superadmin' and if it's not expired.
          let hasRole = adminDoc.data.role == 'admin' || adminDoc.data.role == 'superadmin';
          let notExpired = !('expiresAt' in adminDoc.data) || adminDoc.data.expiresAt > request.time;
          return hasRole && notExpired;
      }
      
      return false;
    }
    
    // Site settings can be read by anyone, but only written by admins
    match /site/{document} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Products can be read by anyone, but only written by admins
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Orders can be read/written by the owner, or managed by an admin
    match /orders/{orderId} {
      allow read, write: if isOwner(resource.data.userId) || isAdmin();
    }

    // Admins collection can only be read by other admins
    match /admins/{adminId} {
      allow read: if isAdmin();
      // Write access should be managed directly in the Firebase Console for security.
      allow write: if false; 
    }
    
    // Default deny all other reads/writes
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
